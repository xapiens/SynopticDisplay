// (c) 2001-2010 Fermi Research Allaince
// $Id: BuilderComponentSaver.java,v 1.2 2010/09/15 16:08:26 apetrov Exp $
package gov.fnal.controls.applications.syndi.builder.element;

import java.io.Writer;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.Properties;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;

/**
 *
 * @author Andrey Petrov
 * @version $Date: 2010/09/15 16:08:26 $
 */
public class BuilderComponentSaver {

    public static BuilderComponentSaver getInstance() {
        return instance;
    }

    private static final BuilderComponentSaver instance = new BuilderComponentSaver();

    private static final DateFormat DATE_FORMAT = new SimpleDateFormat( "yyyy-MM-dd HH:mm:ssZ" );

    private static final Properties PROPS = new Properties();

    static {
        PROPS.put( OutputKeys.METHOD, "xml" );
        PROPS.put( OutputKeys.ENCODING, "UTF-8" );
        PROPS.put( OutputKeys.INDENT, "yes" );
        PROPS.put( "{http://xml.apache.org/xslt}indent-amount", "4" );
    }
    
    private final Transformer xform;
    private final DocumentBuilder parser;

    private BuilderComponentSaver() {
        try {
            TransformerFactory trxFac = TransformerFactory.newInstance();
            this.xform = trxFac.newTransformer();
            DocumentBuilderFactory domFac = DocumentBuilderFactory.newInstance();
            this.parser = domFac.newDocumentBuilder();
        } catch (Exception ex) {
            throw new RuntimeException( ex );
        }
    }

    public Document newDocument() {
        return parser.newDocument();
    }

    public void save( Writer out, List<BuilderComponent> list ) throws Exception {
        if (list.isEmpty()) {
            return;
        }
        Document doc = newDocument();
        doc.appendChild( doc.createComment(
            "\nDO NOT EDIT THIS FILE\n" +
            "Created by Synoptic Builder on " + DATE_FORMAT.format( new Date()) + "\n" +
            "$" + "Id: $\n"
        ));
        Node root = doc;
        if (list.size() > 1) {
            root = createTempContainer( doc );
            doc.appendChild( root );
        }
        for (BuilderComponent c : list) {
            root.appendChild( c.getXML( doc ));
        }
        xform.reset();
        xform.setOutputProperties( PROPS );
        xform.transform( new DOMSource( doc ), new StreamResult( out ));
        out.flush();
    }

    private Element createTempContainer( Document doc ) {
        Element root = doc.createElement( "element" );
        root.setAttribute( "designTimeView", TempContainer.class.getName());
        return root;

    }

}
